---
- name: enable BBR and update packages
  hosts: servers
  remote_user: root
  gather_facts: no
  tasks:
    - name: set net.core.default_qdisc
      sysctl:
        name: net.core.default_qdisc
        value: fq
        state: present

    - name: set net.ipv4.tcp_congestion_control
      sysctl:
        name: net.ipv4.tcp_congestion_control
        value: bbr
        state: present
        reload: yes

    - name: update packages
      apt:
        update_cache: yes
        upgrade: yes

    - name: check if a reboot is required
      stat:
        path: /var/run/reboot-required
      register: reboot_required_file

    - name: reboot if required
      reboot:
      when: reboot_required_file.stat.exists == true
      ignore_errors: yes


- name: Disable and Remove Firewall
  hosts: your_server_group
  become: yes
  vars:
    packages_to_remove: ["ufw", "iptables"]

  tasks:
    - name: Check if UFW is installed
      command: which ufw
      register: ufw_installed
      ignore_errors: true

    - name: Disable and stop UFW
      command: ufw disable
      when: ufw_installed.rc == 0

    - name: Stop UFW service
      systemd:
        name: ufw
        state: stopped
        enabled: no
      when: ufw_installed.rc == 0

    - name: Flush iptables rules
      iptables:
        flush: yes
      when: ansible_os_family == "Debian"

    - name: Check if iptables is installed
      command: which iptables
      register: iptables_installed
      ignore_errors: true

    - name: Stop iptables service
      systemd:
        name: iptables
        state: stopped
        enabled: no
      when: iptables_installed.rc == 0

    - name: Uninstall UFW and iptables packages
      apt:
        name: "{{ packages_to_remove }}"
        state: absent
        purge: yes
      when: ufw_installed.rc == 0 or iptables_installed.rc == 0

- name: install softwares
  hosts: servers
  remote_user: root
  # gather_facts: no
  tasks:
    - name: install softwares
      apt:
        name:
          - wget
          - debian-keyring
          - debian-archive-keyring
          - apt-transport-https
          - curl
          - git
          - mercurial
          - binutils
          - make
          - bison
          - gcc
          - unzip
          - locate
          - htop
          - rsync
          - fail2ban
          - nftables
          - nano
          - build-essential
          - cmake
          - gdb
          - tmux
          - net-tools
          - lsof
        state: latest

    - name: Ensure nftables is enabled and started
      systemd:
        name: nftables
        enabled: yes
        state: started

    - name: Check if Caddy GPG key is already present
      stat:
        path: /usr/share/keyrings/caddy-stable-archive-keyring.gpg
      register: caddy_gpg_key

    - name: Update GPG key for Caddy v2
      shell: curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg
      when: not caddy_gpg_key.stat.exists

    - name: update apt source for caddy v2
      shell: curl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | tee /etc/apt/sources.list.d/caddy-stable.list

    - name: install caddy v2 with apt
      apt:
        name: caddy
        state: latest
        update_cache: yes


- name: Install Docker
  hosts: servers
  gather_facts: yes
  become: yes  # 使用 sudo
  vars:
    arch_mapping:  # Map ansible architecture {{ ansible_architecture }} names to Docker's architecture names
      x86_64: amd64
      aarch64: arm64
  tasks:
    - name: Uninstall unofficial packages
      apt:
        name: "{{ item }}"
        state: absent
      loop:
        - docker.io
        - docker-doc
        - docker-compose
        - podman-docker
        - containerd
        - runc

    - name: Update apt cache and install necessary packages
      apt:
        update_cache: yes
        name:
          - ca-certificates
          - curl
          - gnupg
        state: present

    - name: Ensure /etc/apt/keyrings directory exists
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Add Docker's official GPG key
      apt_key:
        url: https://download.docker.com/linux/{{ ansible_distribution|lower }}/gpg
        state: present
        keyring: /etc/apt/keyrings/docker.gpg

    - name: Print architecture variables
      debug:
        msg: "Architecture: {{ ansible_architecture }}, Codename: {{ ansible_lsb.codename }}"

    - name: Check if Docker repository exists
      ansible.builtin.stat:
        path: /etc/apt/sources.list.d/docker.list
      register: docker_repo_file

    - name: Add Docker repository
      ansible.builtin.apt_repository:
        repo: >-
          deb [arch={{ arch_mapping[ansible_architecture] | default(ansible_architecture) }}
          signed-by=/etc/apt/keyrings/docker.gpg]
          https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_lsb.codename }} stable
        filename: docker
        state: present
      when: not docker_repo_file.stat.exists

    - name: Update apt cache after adding Docker repository
      apt:
        update_cache: yes
      when: not docker_repo_file.stat.exists

    - name: Install Docker CE and related packages
      apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-buildx-plugin
          - docker-compose-plugin
        state: latest
        update_cache: yes

    - name: Add Docker group
      group:
        name: docker
        state: present

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    - name: Enable and start Docker services
      systemd:
        name: "{{ item }}"
        enabled: true
        state: started
      loop:
        - docker.service
        - containerd.service


- name: Install Miniconda3
  hosts: servers
  become: yes
  gather_facts: yes
  vars:
    miniconda_base_url: "https://repo.anaconda.com/miniconda"
    miniconda_installer: "Miniconda3-latest-Linux-{{ ansible_architecture }}.sh"
  tasks:
    - name: Print the architecture of the target host
      debug:
        var: ansible_architecture

    - name: Download Miniconda3 installer for the respective architecture
      get_url:
        url: "{{ miniconda_base_url }}/{{ miniconda_installer }}"
        dest: "/tmp/{{ miniconda_installer }}"
        mode: 0755

    - name: Install Miniconda3
      shell: bash /tmp/{{ miniconda_installer }} -b -p /opt/miniconda3
      args:
        creates: /opt/miniconda3

    - name: Set miniconda3 path to bashrc
      lineinfile:
        path: ~/.bashrc
        line: 'export PATH="/opt/miniconda3/bin:$PATH"'
        create: yes

    - name: Configure Miniconda to not activate base environment on start
      shell: /opt/miniconda3/bin/conda config --set auto_activate_base false

# - name: Install nvm
#   hosts: servers
#   become: yes
#   tasks:
#     - name: Download and install nvm
#       ansible.builtin.shell: >
#         curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.39.7/install.sh | bash
#       args:
#         creates: "{{ ansible_env.HOME }}/.nvm/nvm.sh"

- name: Install fnm (Fast Node Manager)
  hosts: servers
  become: yes
  tasks:
    - name: Download and install fnm
      shell: |
        curl -fsSL https://github.com/Schniz/fnm/raw/master/.ci/install.sh | bash
      args:
        creates: /usr/local/bin/fnm
      # become_user: your_normal_user # 如果需要的话，切换到普通用户

    - name: Add fnm init script to shell configuration
      lineinfile:
        path: "{{ ansible_env.HOME }}/.bashrc"
        line: 'eval "$(fnm env)"'
        create: yes
      # become_user: your_normal_user # 如果需要的话，切换到普通用户


- name: Install GVM (Go Version Manager)
  hosts: servers
  become: yes
  tasks:
    - name: Install Bison
      apt:
        name: bison
        state: present
      when: ansible_os_family == "Debian"

    - name: Install GVM
      shell: |
        curl -s -S -L https://raw.githubusercontent.com/moovweb/gvm/master/binscripts/gvm-installer | bash
      args:
        executable: /bin/bash
      environment:
        SHELL: /bin/bash


- name: Install Rustup (Rust Toolchain Installer)
  hosts: servers
  become: yes
  tasks:
    - name: Install Rustup
      shell: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
      args:
        executable: /bin/bash
      environment:
        USER: "{{ ansible_user }}"
        HOME: "{{ ansible_env.HOME }}"


- name: Configure nftables rules
  hosts: servers
  remote_user: root
  gather_facts: no
  become: yes
  vars:
    custom_block_ports: [14444, 14445]  # 示例自定义端口列表

  tasks:
    - name: Allow local access to database and custom ports
      shell: |
        nft add rule inet filter input ip saddr 127.0.0.1 tcp dport {3306, 5432, 27017, 9092, {{ custom_block_ports | join(', ') }} } accept

    - name: Block external access to database and custom ports
      shell: |
        nft add rule inet filter input tcp dport {3306, 5432, 27017, 9092, {{ custom_block_ports | join(', ') }} } drop

    - name: Save nftables configuration
      shell: nft list ruleset > /etc/nftables.conf


- name: Configure and restart fail2ban
  hosts: servers
  remote_user: root
  gather_facts: no
  become: yes
  tasks:
    - name: Rename /etc/fail2ban/jail.conf to /etc/fail2ban/jail.local
      command: mv /etc/fail2ban/jail.conf /etc/fail2ban/jail.local
      args:
        creates: /etc/fail2ban/jail.local

    - name: Copy jail.conf.j2 to remote /etc/fail2ban/jail.conf
      template:
        src: templates/jail.conf.j2
        dest: /etc/fail2ban/jail.conf
        owner: root
        group: root
        mode: '0644'

    - name: Restart fail2ban service
      systemd:
        name: fail2ban
        state: restarted


- name: Final reboot
  hosts: servers
  remote_user: root
  gather_facts: no
  become: yes
  tasks:
  - name: final reboot
    reboot:
